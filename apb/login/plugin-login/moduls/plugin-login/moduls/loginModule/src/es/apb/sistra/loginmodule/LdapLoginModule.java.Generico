package es.apb.sistra.loginmodule;

import java.lang.reflect.Constructor;
import java.security.Principal;
import java.security.acl.Group;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.login.LoginException;

import org.jboss.security.SimpleGroup;
import org.jboss.security.SimplePrincipal;
import org.jboss.security.auth.spi.UsernamePasswordLoginModule;

/**
 * Login mediante LDAP.
 */
public class LdapLoginModule extends UsernamePasswordLoginModule {

    /** Role de acceso publico */
    private String roleTothom;

    /** Role auto */
    private String roleAuto;

    /** Url Ldap */
    private String url;

    /** Dominio a añadir a usuario (user@dominio) */
    private String dominio;

    /** Base busquedas */
    private String searchBase;

    /** Security authentication */
    private String securityAuth;

    /** uidAttributeID */
    private String userIdAttributeID;

    /** nameAttributeID */
    private String userNameAttributeID;

    /** roleAttributeID */
    private String roleIdAttributeID;

    /** roleNameAttributeID */
    private String roleNameAttributeID;

    /** Principal customizado */
    private ApbPrincipal caller;

    /** Roles */
    private transient SimpleGroup userRoles = new SimpleGroup("Roles");

    @Override
    public void initialize(final Subject subject,
            final CallbackHandler callbackHandler, final Map sharedState,
            final Map options) {
        super.initialize(subject, callbackHandler, sharedState, options);
        roleTothom = (String) options.get("roleTothom");
        url = (String) options.get("url");
        searchBase = (String) options.get("searchBase");
        dominio = (String) options.get("dominio");
        roleAuto = (String) options.get("roleAuto");
        securityAuth = (String) options.get("securityAuth");
        userIdAttributeID = (String) options.get("uidAttributeID");
        userNameAttributeID = (String) options.get("nameAttributeID");
        roleIdAttributeID = (String) options.get("roleAttributeID");
        roleNameAttributeID = (String) options.get("roleNameAttributeID");

        // Valores x defecto
        if (securityAuth == null || securityAuth.trim().length() == 0) {
            securityAuth = "simple";
        }
        if (userIdAttributeID == null || userIdAttributeID.trim().length() == 0) {
            userIdAttributeID = "userPrincipalName";
        }
        if (userNameAttributeID == null
                || userNameAttributeID.trim().length() == 0) {
            userNameAttributeID = "cn";
        }
        if (roleIdAttributeID == null || roleIdAttributeID.trim().length() == 0) {
            roleIdAttributeID = "memberOf";
        }
        if (roleNameAttributeID == null
                || roleNameAttributeID.trim().length() == 0) {
            roleNameAttributeID = "cn";
        }

    }

    /** Login */
    @Override
    public boolean login() throws LoginException {
        // Comprobamos si esta habilitado UseFirstPass
        if (getUseFirstPass() == true) {
            return super.login();
        } else {
            return loginLDAP();
        }
    }

    public boolean loginLDAP() throws LoginException {
        log.debug("enter: login()");
        super.loginOk = false;

        // Obtenemos usuario y password
        final String[] userPass = this.getUsernameAndPassword();
        final String username = userPass[0];
        final String password = userPass[1];

        // Creamos principal
        try {
            obtenerInfoSesionAutenticacion(username, password);
        } catch (final Exception e) {
            log.error("Error creando ApbPrincipal", e);
            throw new LoginException("Error creando ApbPrincipal");
        }

        // Establecemos shared state
        if (getUseFirstPass() == true) {
            // Add authentication info to shared state map
            sharedState.put("javax.security.auth.login.name", caller.getName());
            sharedState.put("javax.security.auth.login.password", password);
        }

        // Damos login por realizado
        super.loginOk = true;
        log.debug("Login OK para " + caller.getName());
        return true;

    }

    @Override
    protected String getUsersPassword() throws LoginException {
        return "";
    }

    /**
     * Obtiene roles usuario (modificado para que no llame a createIdentity al
     * crear cada role)
     */
    @Override
    protected Group[] getRoleSets() throws LoginException {
        final Principal principal = getIdentity();

        if (!(principal instanceof ApbPrincipal)) {
            if (log.isTraceEnabled())
                log.trace("Principal " + principal + " not a ApbPrincipal");
            return new Group[0];
        }

        final HashMap setsMap = new HashMap();
        setsMap.put("Roles", userRoles);

        final Group principalGroup = new SimpleGroup("CallerPrincipal");
        principalGroup.addMember(principal);
        setsMap.put("CallerPrincipal", principalGroup);

        // Devolvemos respuesta
        final Group roleSets[] = new Group[setsMap.size()];
        setsMap.values().toArray(roleSets);
        return roleSets;
    }

    @Override
    protected Principal getIdentity() {
        Principal identity = caller;
        if (identity == null)
            identity = super.getIdentity();
        return identity;
    }

    private void obtenerInfoSesionAutenticacion(final String username,
            final String password) throws NamingException {
        // Usuario unautenticado
        if (username == null
                || username.equals(options.get("unauthenticatedIdentity"))) {
            log.debug("Autenticando usuario anonimo");
            caller = new ApbPrincipal(
                    (String) options.get("unauthenticatedIdentity"), "", "",
                    'A');
            final List<String> roles = new ArrayList<String>();
            roles.add(roleTothom);
            userRoles = calcularRoles(roles);
        } else {
            // Usuario LDAP
            log.debug("Autenticando usuario a traves LDAP: " + username);
            DirContext ctx = null;
            try {
                NamingEnumeration<SearchResult> answer;

                // Usuario es usuario@dominio
                String user = username;
                if (dominio != null && dominio.trim().length() > 0) {
                    user = user + "@" + dominio;
                }

                final Hashtable<String, String> env = new Hashtable<String, String>();
                env.put(Context.INITIAL_CONTEXT_FACTORY,
                        "com.sun.jndi.ldap.LdapCtxFactory");
                env.put(Context.SECURITY_AUTHENTICATION, securityAuth);
                env.put(Context.PROVIDER_URL, url);
                env.put(Context.SECURITY_PRINCIPAL, user);
                env.put(Context.SECURITY_CREDENTIALS, password);

                // Autentica contra LDAP
                ctx = new InitialDirContext(env);

                // Obtener info usuario: nombre y roles
                final StringBuilder searchFilter = new StringBuilder("(&");
                searchFilter.append("(objectClass=person)");
                searchFilter.append("(" + userIdAttributeID + "=" + user + ")");
                searchFilter.append(")");

                final String returnAttrs[] = {roleIdAttributeID,
                        userNameAttributeID};
                final SearchControls sCtrl = new SearchControls();
                sCtrl.setSearchScope(SearchControls.SUBTREE_SCOPE);
                sCtrl.setReturningAttributes(returnAttrs);

                final String filterLdap = searchFilter.toString();
                log.debug("Filtro LDAP: " + filterLdap + " para usuario "
                        + user);

                answer = ctx.search(searchBase, filterLdap, sCtrl);

                List<String> roles = new ArrayList<String>();
                String nombre = null;
                if (answer.hasMoreElements()) {
                    final SearchResult sr = answer.next();
                    if (sr.getAttributes().get(roleIdAttributeID) != null) {
                        final String memberOfAttrValue = sr.getAttributes()
                                .get(roleIdAttributeID).toString();
                        log.debug("Grupos LDAP: " + memberOfAttrValue);
                        roles = extraerRoles(memberOfAttrValue);
                        for (int i = 0; i < roles.size(); i++) {
                            log.debug("Role: " + roles.get(i));
                        }
                    }
                    if (sr.getAttributes().get(userNameAttributeID) != null) {
                        final String cn = sr.getAttributes()
                                .get(userNameAttributeID).toString();
                        log.debug(userNameAttributeID + ": " + cn);
                        nombre = extraerNombre(cn);
                        log.debug("Nombre: " + nombre);
                    }
                } else {
                    log.debug("No hay resultados");
                }

                caller = new ApbPrincipal(username, nombre, "", 'U');
                userRoles = calcularRoles(roles);
            } finally {
                if (ctx != null) {
                    ctx.close();
                }
            }
        }
    }

    private String extraerNombre(final String cn) {
        String nombre = "";
        if (cn != null) {
            final int posCN = cn.toLowerCase().indexOf(
                    userNameAttributeID + ":");
            if (posCN != -1) {
                nombre = cn.substring(
                        posCN + (userNameAttributeID + ":").length()).trim();
            }
        }
        return nombre;
    }

    private List<String> extraerRoles(final String memberOfAttrValue) {
        final List<String> roles = new ArrayList<String>();
        int posIni = 0;
        while (posIni != -1) {
            final int posCN = memberOfAttrValue.toUpperCase().indexOf(
                    roleNameAttributeID + "=", posIni);
            if (posCN > 0) {
                final int posComa = memberOfAttrValue.indexOf(",", posCN);
                final String role = memberOfAttrValue.substring(
                        posCN + (roleNameAttributeID + "=").length(), posComa)
                        .trim();
                roles.add(role);
                posIni = posComa;
            } else {
                posIni = -1;
            }
        }
        return roles;
    }

    private SimpleGroup calcularRoles(final List<String> roles) {
        final SimpleGroup rolesGroup = new SimpleGroup("Roles");
        for (final Iterator iterator = roles.iterator(); iterator.hasNext();) {
            final String roleName = (String) iterator.next();
            rolesGroup.addMember(new SimplePrincipal(roleName));
        }

        // Añadir role tothom: a todos menos usuario auto
        if (!roles.contains(roleAuto)) {
            rolesGroup.addMember(new SimplePrincipal(roleTothom));
        }

        return rolesGroup;
    }

    /**
     * Utility method to create a Principal for the given username. This creates
     * an instance of the principalClassName type if this option was specified
     * using the class constructor matching: ctor(String). If principalClassName
     * was not specified, a SimplePrincipal is created.
     * 
     * @param username
     *            the name of the principal
     * @return the principal instance
     * @throws java.lang.Exception
     *             thrown if the custom principal type cannot be created.
     */
    @Override
    protected Principal createIdentity(final String username) throws Exception {
        Principal p = null;
        if (principalClassName == null) {
            // p = new SimplePrincipal(username);
            p = new ApbPrincipal(
                    (String) options.get("unauthenticatedIdentity"), "", "",
                    'A');
        } else {
            final ClassLoader loader = Thread.currentThread()
                    .getContextClassLoader();
            final Class clazz = loader.loadClass(principalClassName);
            final Class[] ctorSig = {String.class};
            final Constructor ctor = clazz.getConstructor(ctorSig);
            final Object[] ctorArgs = {username};
            p = (Principal) ctor.newInstance(ctorArgs);
        }
        return p;
    }

    /**
     * @return the securityAuth
     */
    public String getSecurityAuth() {
        return securityAuth;
    }

    /**
     * @param pSecurityAuth
     *            the securityAuth to set
     */
    public void setSecurityAuth(final String pSecurityAuth) {
        securityAuth = pSecurityAuth;
    }

    /**
     * @return the uidAttributeID
     */
    public String getUserIdAttributeID() {
        return userIdAttributeID;
    }

    /**
     * @param pUidAttributeID
     *            the uidAttributeID to set
     */
    public void setUserIdAttributeID(final String pUidAttributeID) {
        userIdAttributeID = pUidAttributeID;
    }

    /**
     * @return the nameAttributeID
     */
    public String getUserNameAttributeID() {
        return userNameAttributeID;
    }

    /**
     * @param pNameAttributeID
     *            the nameAttributeID to set
     */
    public void setUserNameAttributeID(final String pNameAttributeID) {
        userNameAttributeID = pNameAttributeID;
    }

    /**
     * @return the roleNameAttributeID
     */
    public String getRoleNameAttributeID() {
        return roleNameAttributeID;
    }

    /**
     * @param pRoleNameAttributeID
     *            the roleNameAttributeID to set
     */
    public void setRoleNameAttributeID(final String pRoleNameAttributeID) {
        roleNameAttributeID = pRoleNameAttributeID;
    }

}